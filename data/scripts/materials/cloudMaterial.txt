let createCloudMaterial = func(device, shadersFile, settingsBuffer, gBuffer, worlyData, scene) {
	let gBuff = gBuffer;
	let camBuff = gBuffer.camBuffer;

	let shaderCode = readFile(shadersFile);

	let vertexShader = api.vertexShader();
	vertexShader.compile(shaderCode);

	let pixelShader = api.pixelShader();
	pixelShader.compile(shaderCode);

	let object = none;
	let instanceBuffer = none;
	let constantBuffer = none;

	let setObject = func(obj) {
		object = obj;
	};
	let setInstanceBuffer = func(instanceBuff) {
		instanceBuffer = instanceBuff;
	};
	let setConstantBuffer = func(constantBuff) {
		constantBuffer = constantBuff;
	};
	
	let cloudMat = api.deferred.cloudMatCL();
	cloudMat.create(device, vertexShader, pixelShader, camBuff, settingsBuffer);

	let fence = api.fence();
	fence.create(device);
	let signal = 0;

	let descriptors = [];
	let texDesc = {};
	texDesc.type = "srv_tex";
	texDesc.texture = worlyData.getUAVTex();

	descriptors.push(texDesc);

	let descHeap = api.descriptorHeap();
	descHeap.create(device, descriptors);

	let render = func(swapChain, commandQueue, onReady) {

		let fe = api.fenceEvent();
		fe.create();

		fe.wait(fence, signal, func(arg) {
			signal = signal + 1;
			onReady();
		});

		cloudMat.populate(swapChain, object.vertex, object.index, instanceBuffer, gBuffer, descHeap, scene.lightsConstantBuff, scene.lightsBuff);
		cloudMat.execute(commandQueue, fence, signal);
	};

	let res = {};
	res.setObject = setObject;
	res.setInstanceBuffer = setInstanceBuffer;
	res.setConstantBuffer = setConstantBuffer;
	res.render = render;

	return res;
};

export = createCloudMaterial;