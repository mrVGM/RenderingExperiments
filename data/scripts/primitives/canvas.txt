let generateVertices = func() {
	let verts = [];
	let indices = [];

	let append2 = func(x, y) {
		verts.push(x);
		verts.push(y);
	};
	append2(-1, -1);
	append2(1, -1);
	append2(1, 1);
	append2(-1, 1);

	indices.push(0);
	indices.push(3);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(1);

	let data = {};
	data.vertexData = verts;
	data.indexData = indices;
	return data;
};

let prepareData = func(device, onReady) {
	let verts = generateVertices();
	
	let resources = require("resources/resourceUtils.txt");

	let vertexUploadBB = resources.bufferBuilder();
	vertexUploadBB.upload(1);
	vertexUploadBB.setSize(4 * verts.vertexData.length);
	vertexUploadBB.setStride(8);

	let vertexBB = resources.bufferBuilder();
	vertexBB.upload(0);
	vertexBB.setSize(4 * verts.vertexData.length);
	vertexBB.setStride(8);

	let indexUploadBB = resources.bufferBuilder();
	indexUploadBB.upload(1);
	indexUploadBB.setSize(4 * verts.indexData.length);
	indexUploadBB.setStride(4);

	let indexBB = resources.bufferBuilder();
	indexBB.upload(0);
	indexBB.setSize(4 * verts.indexData.length);
	indexBB.setStride(4);

	let vertexUploadBuff = none;
	let vertexBuff = none;
	let indexUploadBuff = none;
	let indexBuff = none;

	let copyLeft = 2;

	let dataPrepared = func() {
		if (copyLeft > 0) {
			return;
		}

		let res = {};
		res.vertex = vertexBuff;
		res.index = indexBuff;

		let mesh = api.scene.mesh();
		let ranges = [];
		let range = [];
		range.push(0);
		range.push(6);
		ranges.push(range);

		mesh.create(vertexBuff, indexBuff, ranges);

		res.mesh = mesh;
		onReady(res);
	};

	let copyVertex = func() {
		if (vertexUploadBuff == none || vertexBuff == none) {
			return;
		}
		resources.copyBuffers(device, vertexBuff, vertexUploadBuff, func() {
			copyLeft = copyLeft - 1;
			dataPrepared();
		});
	};

	let copyIndex = func() {
		if (indexUploadBuff == none || indexBuff == none) {
			return;
		}

		resources.copyBuffers(device, indexBuff, indexUploadBuff, func() {
			copyLeft = copyLeft - 1;
			dataPrepared();
		});
	};

	vertexUploadBB.build(device, func(buff) {
		vertexUploadBuff = buff;
		vertexUploadBuff.copyData(verts.vertexData);
		copyVertex();
	});

	vertexBB.build(device, func(buff) {
		vertexBuff = buff;
		copyVertex();
	});

	indexUploadBB.build(device, func(buff) {
		indexUploadBuff = buff;
		indexUploadBuff.copyIntData(verts.indexData);
		copyIndex();
	});

	indexBB.build(device, func(buff) {
		indexBuff = buff;
		copyIndex();
	});
};

export = prepareData;