let resources = require("resources/resourceUtils.txt");
let utils = require("utils.txt");
let math = require("math.txt");

let scene = {};

scene.addObject = func(position, rotation, scale) {
	if (scene.instanceData == none) {
		scene.instanceData = [];
	}

	utils.foreach(position, func(x) {
		scene.instanceData.push(x);
	});

	utils.foreach(rotation, func(x) {
		scene.instanceData.push(x);
	});

	utils.foreach(scale, func(x) {
		scene.instanceData.push(x);
	});
};

scene.addSkyBox = func(position, rotation, scale) {
	if (scene.skyBoxInstanceData == none) {
		scene.skyBoxInstanceData = [];
	}

	utils.foreach(position, func(x) {
		scene.skyBoxInstanceData.push(x);
	});

	utils.foreach(rotation, func(x) {
		scene.skyBoxInstanceData.push(x);
	});

	utils.foreach(scale, func(x) {
		scene.skyBoxInstanceData.push(x);
	});
};

scene.addCloudObject = func(position, rotation, scale) {
	let startRotation = math.vector(math.cos(math.PI / 2), -math.sin(math.PI / 2), 0, 0);
	let rot = math.multiplyQuaternions(rotation, startRotation);

	if (scene.cloudInstanceData == none) {
		scene.cloudInstanceData = [];
	}

	utils.foreach(position, func(x) {
		scene.cloudInstanceData.push(x);
	});

	utils.foreach(rot, func(x) {
		scene.cloudInstanceData.push(x);
	});

	utils.foreach(scale, func(x) {
		scene.cloudInstanceData.push(x);
	});
};

let loadCube = func(device, onReady) {
	let prepCube = require("primitives/cube.txt");
	prepCube(device, func(x) {
		if (scene.primitives == none) {
			scene.primitives = {};
		}
		scene.primitives.cube = x;
		onReady();
	});
};

let loadPlane = func(device, onReady) {
	let prepPlane = require("primitives/plane.txt");
	prepPlane(device, func(x) {
		if (scene.primitives == none) {
			scene.primitives = {};
		}
		scene.primitives.plane = x;
		onReady();
	});
};

let loadInstanceBuff = func(device, onReady) {
	let instanceData = scene.instanceData;

	let instanceBB = resources.bufferBuilder();
	instanceBB.upload(1);
	instanceBB.setSize(4 * instanceData.length);
	instanceBB.setStride(40);
	instanceBB.build(device, func(buff) {
		scene.instanceBuff = buff;
		scene.instanceBuff.copyData(instanceData);

		onReady();
	});
};

let loadCloudInstanceBuff = func(device, onReady) {
	let instanceData = scene.cloudInstanceData;

	let instanceBB = resources.bufferBuilder();
	instanceBB.upload(1);
	instanceBB.setSize(4 * instanceData.length);
	instanceBB.setStride(40);
	instanceBB.build(device, func(buff) {
		scene.cloudInstanceBuff = buff;
		scene.cloudInstanceBuff.copyData(instanceData);

		onReady();
	});
};

let loadSkyBoxInstanceBuff = func(device, onReady) {
	let instanceData = scene.skyBoxInstanceData;

	let instanceBB = resources.bufferBuilder();
	instanceBB.upload(1);
	instanceBB.setSize(4 * instanceData.length);
	instanceBB.setStride(40);
	instanceBB.build(device, func(buff) {
		scene.skyBoxInstanceBuff = buff;
		scene.skyBoxInstanceBuff.copyData(instanceData);

		onReady();
	});
};

let loadLights = func(device, onReady) {
	let lightsBB = resources.bufferBuilder();

	lightsBB.upload(1);
	lightsBB.setSize(4 * scene.lights.length);
	lightsBB.setStride(28);
	lightsBB.build(device, func(buff) {
		scene.lightsBuff = buff;
		scene.lightsBuff.copyData(scene.lights);

		onReady();
	});
};

let loadLightsConstantBuff = func(device, onReady) {
	let cBB = resources.bufferBuilder();

	cBB.upload(1);
	cBB.setSize(256);
	cBB.setStride(256);
	cBB.build(device, func(buff) {
		scene.lightsConstantBuff = buff;
		let lightsInfo = [];
		lightsInfo.push(scene.lights.length / 7);
		lightsInfo.push(1);
		lightsInfo.push(1);
		lightsInfo.push(1);

		lightsInfo.push(0.3);

		scene.lightsConstantBuff.copyData(lightsInfo);

		onReady();
	});
};

scene.addLight = func(position, color, intensity) {
	if (scene.lights == none) {
		scene.lights = [];
	}

	utils.foreach(position, func(x) {
		scene.lights.push(x);
	});

	utils.foreach(color, func(x) {
		scene.lights.push(x);
	});
	
	scene.lights.push(intensity);
};

scene.load = func(device, onReady) {
	let cubeLoaded = 0;
	let planeLoaded = 0;
	let instanceBuffLoaded = 0;
	let cloudInstanceBuffLoaded = 0;
	let skyBoxInstanceBuffLoaded = 0;
	let lightsBuffLoaded = 0;
	let lightsConstantBuffLoaded = 0;

	let callReady = func() {
		if (cubeLoaded == 0 ||
			planeLoaded == 0 ||
			instanceBuffLoaded == 0 ||
			cloudInstanceBuffLoaded == 0 ||
			skyBoxInstanceBuffLoaded == 0 ||
			lightsBuffLoaded == 0 ||
			lightsConstantBuffLoaded == 0) {
			return;
		}
		onReady();
	};

	loadCube(device, func() {
		cubeLoaded = 1;
		callReady();
	});

	loadPlane(device, func() {
		planeLoaded = 1;
		callReady();
	});

	loadInstanceBuff(device, func() {
		instanceBuffLoaded = 1;
		callReady();
	});

	loadCloudInstanceBuff(device, func() {
		cloudInstanceBuffLoaded = 1;
		callReady();
	});

	loadSkyBoxInstanceBuff(device, func() {
		skyBoxInstanceBuffLoaded = 1;
		callReady();
	});

	loadLights(device, func() {
		lightsBuffLoaded = 1;
		callReady();
	});

	loadLightsConstantBuff(device, func() {
		lightsConstantBuffLoaded = 1;
		callReady();
	});
};

scene.getObjects = func() {
	let res = [];

	let tmp = {};
	tmp.geometry = scene.primitives.cube;
	tmp.instances = scene.instanceBuff;

	res.push(tmp);
	return res;
};

scene.getSkyBox = func() {
	let res = {};
	res.geometry = scene.primitives.cube;
	res.instances = scene.skyBoxInstanceBuff;

	return res;
};

scene.getCloudObjects = func() {
	let res = [];

	let tmp = {};
	tmp.geometry = scene.primitives.plane;
	tmp.instances = scene.cloudInstanceBuff;

	res.push(tmp);
	return res;
};

export = scene;