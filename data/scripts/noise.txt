let math = require("math.txt");
let utils = require("utils.txt");
let resources = require("resources/resourceUtils.txt");

let wnd = api.window();
wnd.create(1280, 720);

let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

generalInit();

let mat = none;
let mat2 = none;

let offset = 0;
let updateSettings = func() {
	let buffData = [];
	buffData.push(0.01);
	buffData.push(0.01);
	buffData.push(0.49);
	buffData.push(0.49);

	let aspect = wnd.width() / wnd.height();
	let factor = 3;

	buffData.push(factor * aspect);
	buffData.push(factor);

	buffData.push(offset);

	buffData.push(10);
	buffData.push(0.7);
	buffData.push(2);

	mat.buffer.copyData(buffData);
	offset = offset + 0.001;
};

let offset2 = 0;
let updateSettings2 = func() {
	let buffData = [];
	buffData.push(0.51);
	buffData.push(0.01);
	buffData.push(0.99);
	buffData.push(0.49);

	let aspect = wnd.width() / wnd.height();
	let factor = 7;

	buffData.push(factor * aspect);
	buffData.push(factor);

	buffData.push(offset2);

	mat2.buffer.copyData(buffData);
	offset2 = offset2 + 0.01;
};

let startRender = func() {
	if (mat == none || mat2 == none) {
		return;
	}

	let rend = mat.getRenderFunc(swapChain, commandQueue);
	let rend2 = mat2.getAsyncRenderFunc(swapChain, commandQueue);

	let clearRT = api.aux.clearRT();
	
	let renderLoop = func() {
		if (wnd.isAlive() == 0) {
			return;
		}

		swapChain.updateCurrentFrameIndex();
		clearRT.create(device);
		clearRT.populate(swapChain);
		clearRT.executeAsync(commandQueue);

		rend2();
		rend(func() {
			swapChain.present();
			updateSettings();
			updateSettings2();
			wnd.finishDraw();
		});
	};

	api.app_context.render = func(arg) { renderLoop(); };
};

let prep = require("noise/canvasMaterial.txt");

prep(device, "shaders/perlinNoise.hlsl", func(data) {
	mat = data;

	updateSettings();
	startRender();
});

prep(device, "shaders/perlinNoiseCurves.hlsl", func(data) {
	mat2 = data;

	updateSettings2();
	startRender();
});