let math = require("math.txt");
let utils = require("utils.txt");
let resources = require("resources/resourceUtils.txt");

let wnd = api.window();
wnd.create(1280, 720);

let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

generalInit();

let mat = none;

let updateSettings = func() {
	let buffData = [];
	buffData.push(0);
	buffData.push(0);
	buffData.push(1);
	buffData.push(1);

	let aspect = wnd.width() / wnd.height();
	let factor = 10;

	buffData.push(factor * aspect);
	buffData.push(factor);

	buffData.push(offset);
	mat.buffer.copyData(buffData);
	offset = offset + 0.01;
};

let startRender = func() {
	let rend = mat.getRenderFunc(swapChain, commandQueue);
	let clearRT = api.aux.clearRT();
	
	let renderLoop = func() {
		if (wnd.isAlive() == 0) {
			return;
		}

		swapChain.updateCurrentFrameIndex();
		clearRT.create(device);
		clearRT.populate(swapChain);
		clearRT.executeAsync(commandQueue);

		rend(func() {
			swapChain.present();
			updateSettings();
			wnd.finishDraw();
		});
	};

	api.app_context.render = func(arg) { renderLoop(); };
};

let prep = require("noise/canvasMaterial.txt");

let offset = 0;

prep(device, "shaders/perlinNoise.hlsl", func(data) {
	mat = data;

	updateSettings();
	startRender();
});
