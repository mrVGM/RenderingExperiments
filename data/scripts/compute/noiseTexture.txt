let utils = require("utils.txt");
let resources = require("resources/resourceUtils.txt");

let loadCB = func(device, onReady) {

	let constBB = resources.bufferBuilder();
	constBB.upload(1);
	constBB.setSize(256);
	constBB.setStride(256);

	constBB.build(device, onReady);
};

let loadSRVBuff = func(device, buffSize, buffStride, onReady) {
	
	let srvBB = resources.bufferBuilder();
	srvBB.upload(1);
	srvBB.setSize(buffSize);
	srvBB.setStride(buffStride);

	srvBB.build(device, onReady);
};

let loadTex = func(device, texSize, onReady) {
	let texBB = resources.textureBuilder();
	texBB.setDim(3);
	texBB.allowUA(1);
	texBB.setWidth(texSize);
	texBB.setHeight(texSize);
	texBB.setDepth(texSize);

	texBB.build(device, onReady);
};

let compileShader = func(shaderFile) {
	let computeShader = api.computeShader();
	computeShader.loadPrecompiled(shaderFile);
	return computeShader;
};

let prepareData = func(device, texSize, shaderFile, onReady) {
	let cBuff = none;
	let srvBuff = none;
	let uavTex = none;

	let createDescHeap = func() {
		let descHeap = api.descriptorHeap();
		
		let buffs = [];
		let uavDesc = {};
		uavDesc.type = "uav_tex";
		uavDesc.texture = uavTex;
		buffs.push(uavDesc);

		let srvDesc = {};
		srvDesc.type = "srv_buff";
		srvDesc.buffer = srvBuff;
		buffs.push(srvDesc);

		descHeap.create(device, buffs);
		return descHeap;
	};

	let w1 = 3;
	let w2 = 6;
	let w3 = 8;
	let dataBuffElements = w1 * w1 * w1 + w2 * w2 * w2 + w3 * w3 * w3;
	let dataBuffStride = 12;
	let dataBuffSize = dataBuffElements * dataBuffStride;

	let callReady = func() {
		if (cBuff == none || srvBuff == none || uavTex == none) {
			return;
		}

		let compute = api.compute.noiseTexture();
		try {
		let shader = compileShader(shaderFile);
		compute.create(device, shader);
		} catch(e) {
			print(e);
		}
		compute.setConstantBuffer(cBuff);
		compute.setDataBuffer(srvBuff);
		compute.setTexture(uavTex);
		compute.setDescriptorHeap(createDescHeap());

		compute.setupWorlyData(w1, w2, w3);
		
		onReady(compute);
	};

	loadSRVBuff(device, dataBuffSize, dataBuffStride, func(buff) {
		srvBuff = buff;
		callReady();
	});

	loadCB(device, func(buff) {
		cBuff = buff;
		callReady();
	});

	loadTex(device, texSize, func(tex) {
		uavTex = tex;
		callReady();
	});
};

export = prepareData;