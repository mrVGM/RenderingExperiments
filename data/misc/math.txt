let utils = require("utils.txt");

let vector2 = func(x, y) {
	let res = [];
	res.push(x);
	res.push(y);
	return res;
};

let vector3 = func(x, y, z) {
	let res = [];
	res.push(x);
	res.push(y);
	res.push(z);

	return res;
};

let vector = func(x, y, z, w) {
	let res = [];
	res.push(x);
	res.push(y);
	res.push(z);
	res.push(w);

	return res;
};

let matrix = func(r1, r2, r3, r4) {
	let getData = func() {
		let data = [];
		utils.foreach(r1, func(x) {
			data.push(x);
		});

		utils.foreach(r2, func(x) {
			data.push(x);
		});

		utils.foreach(r3, func(x) {
			data.push(x);
		});

		utils.foreach(r4, func(x) {
			data.push(x);
		});

		return data;
	};

	let getRows = func() {
		let rows = [];

		rows.push(r1);
		rows.push(r2);
		rows.push(r3);
		rows.push(r4);

		return rows;
	};

	let getColumns = func() {
		let columns = [];

		columns.push(vector(r1[0], r2[0], r3[0], r4[0]));
		columns.push(vector(r1[1], r2[1], r3[1], r4[1]));
		columns.push(vector(r1[2], r2[2], r3[2], r4[2]));
		columns.push(vector(r1[3], r2[3], r3[3], r4[3]));

		return columns;
	};

	let res = {};
	res.getData = getData;
	res.getRows = getRows;
	res.getColumns = getColumns;

	return res;
};

let multiplyMatrices = func(m1, m2) {
	let rows = m1.getRows();
	let columns = m2.getColumns();

	let r1 = vector(dot(rows[0], columns[0]), dot(rows[0], columns[1]), dot(rows[0], columns[2]), dot(rows[0], columns[3]));
	let r2 = vector(dot(rows[1], columns[0]), dot(rows[1], columns[1]), dot(rows[1], columns[2]), dot(rows[1], columns[3]));
	let r3 = vector(dot(rows[2], columns[0]), dot(rows[2], columns[1]), dot(rows[2], columns[2]), dot(rows[2], columns[3]));
	let r4 = vector(dot(rows[3], columns[0]), dot(rows[3], columns[1]), dot(rows[3], columns[2]), dot(rows[3], columns[3]));

	return matrix(r1, r2, r3, r4);
};

let multiply = func(scalar, vector) {
	let tmp = utils.map(vector, func(x) {
		return scalar * x;
	});

	return utils.toList(tmp);
};

let addVectors = func(a, b) {
	let tmp = utils.zip(a, b);
	tmp = utils.map(tmp, func(x) {
		return x.fst + x.snd;
	});
	return utils.toList(tmp);
};

let subtractVectors = func(a, b) {
	let minusB = multiply(-1, b);
	return addVectors(a, minusB);
};

let dot = func(a, b) {
	let tmp = utils.zip(a, b);
	let s = 0;
	utils.foreach(tmp, func(x) {
		s = s + x.fst * x.snd;
	});
	return s;
};

let vectorLength = func(x) {
	let sq = dot(x, x);
	return api.math.sqrt(sq);
};

let normalize = func(x) {
	let l = dot(x, x);
	if (l == 0) {
		return x;
	}
	
	let l = vectorLength(x);
	return multiply(1 / l, x);
};

let cross = func(a, b) {
	return vector3(a[1]*b[2] - a[2]*b[1], a[2]*b[0] - a[0]*b[2], a[0]*b[1] - a[1]*b[0]);
};

let quaternion = func(a, b, c, d) {
	return vector(a, b, c, d);
};

let multiplyQuaternions = func(x, y) {
	let a = x[0] * y[0] - x[1] * y[1] - x[2] * y[2] - x[3] * y[3];
	let b = x[0] * y[1] + x[1] * y[0] + x[2] * y[3] - x[3] * y[2];
	let c = x[0] * y[2] - x[1] * y[3] + x[2] * y[0] + x[3] * y[1];
	let d = x[0] * y[3] + x[1] * y[2] - x[2] * y[1] + x[3] * y[0];

	return quaternion(a, b, c, d);
};

let conjugate = func(q) {
	return quaternion(q[0], -q[1], -q[2], -q[3]);
};

let rotateVector = func(x, axis, angle) {
	let xQ = quaternion(0, x[0], x[1], x[2]);

	axis = normalize(axis);
	let rad = api.math.PI * angle / 180;

	rad = rad / 2;

	let cos = api.math.cos(rad);
	let sin = api.math.sin(rad);

	let q = quaternion(cos, -sin * axis[0], -sin * axis[1], -sin * axis[2]);

	let res = multiplyQuaternions(conjugate(q), multiplyQuaternions(xQ, q));
	return vector3(res[1], res[2], res[3]);
};

export.vector2 = vector2;
export.vector3 = vector3;
export.vector = vector;
export.multiply = multiply;
export.addVectors = addVectors;
export.subtractVectors = subtractVectors;
export.dot = dot;
export.vectorLength = vectorLength;
export.normalize = normalize;
export.cross = cross;
export.quaternion = quaternion;
export.multiplyQuaternions = multiplyQuaternions;
export.conjugate = conjugate;
export.rotateVector = rotateVector;

export.sqrt = api.math.sqrt;
export.sin = api.math.sin;
export.cos = api.math.cos;
export.asin = api.math.asin;
export.acos = api.math.acos;
export.PI = api.math.PI;

export.matrix = matrix;
export.multiplyMatrices = multiplyMatrices;
