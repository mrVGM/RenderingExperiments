let math = require("math.txt");
let utils = require("utils.txt");

let wnd = api.window();
wnd.create(600, 400);

let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

let cam = api.aux.camera();
let offset = 0;

let updateCam = func(camBuff) {
	offset = offset + 0.01;

	let pos = math.vector3(5 * math.cos(offset), offset, 5 * math.sin(offset));
	let target = math.vector3(0, 0, 0);

	let aspect = wnd.width() / wnd.height();
	cam.setPosition(pos);
	cam.setTarget(target);
	cam.setAspect(aspect);
	cam.setNearPlane(0.1);
	cam.setFarPlane(10000);
	cam.setFOV(60);

	let mat = cam.getMVPMatrix();

	camBuff.copyData(mat);
};

let cube = require("primitives/cube.txt");
let cubeVerts = none;
let instance = none;

let loadGeometry = func(onReady) {
	let callReady = func() {
		if (cubeVerts == none || instance == none) {
			return;
		}

		onReady();
	};

	cube(device, func(verts) {
		cubeVerts = verts;
		callReady();
	});

	let instanceData = [];
	instanceData.push(0);
	instanceData.push(1);
	instanceData.push(0);
	instanceData.push(math.cos(math.PI / 8));
	instanceData.push(-math.sin(math.PI / 8));
	instanceData.push(0);
	instanceData.push(0);
	instanceData.push(1);
	instanceData.push(1);
	instanceData.push(1);

	instanceData.push(0);
	instanceData.push(-1);
	instanceData.push(0);
	instanceData.push(math.cos(math.PI / 8));
	instanceData.push(-math.sin(math.PI / 8));
	instanceData.push(0);
	instanceData.push(0);
	instanceData.push(1);
	instanceData.push(1);
	instanceData.push(1);

	let instanceBB = resources.bufferBuilder();
	instanceBB.upload(1);
	instanceBB.setSize(4 * instanceData.length);
	instanceBB.setStride(40);
	instanceBB.build(device, func(buff) {
		instance = buff;
		instance.copyData(instanceData);

		callReady();
	});
};

let resources = require("resources/resourceUtils.txt");

let gBuffer = none;
let litPass = api.deferred.litPass();

let camBuff = none;
let prepCamBuff = func(onReady) {
	if (camBuff != none) {
		onReady(camBuff);
		return;
	}

	let camBB = resources.bufferBuilder();
	camBB.upload(1);
	camBB.setSize(256);
	camBB.setStride(256);
	camBB.build(device, func(buff) {
		camBuff = buff;
		onReady();
	});
};

let prepMaterial = func() {
	let createMaterial = require("materials/litMaterial.txt");
	let material = createMaterial(device, "cube.hlsl", camBuff, gBuffer);
	return material;
};

let theMaterial = none;

let startRendMat = func() {
	print("start render mat");

	theMaterial.setObject(cubeVerts);
	theMaterial.setInstanceBuffer(instance);

	let fence = api.fence();
	fence.create(device);

	let index = 1;

	let render = func() {
		if (wnd.isAlive() == 0) {
			return;
		}

		let fe = api.fenceEvent();
		fe.create();

		fe.wait(fence, index, func(arg) {
			index = index + 1;

			swapChain.present();
			render();
		});

		swapChain.updateCurrentFrameIndex();
		litPass.executeStart(commandQueue, fence, 0);

		let objects = scene.getObjects();

		utils.foreach(objects, func(x) {
			theMaterial.setObject(x.geometry);
			theMaterial.setInstanceBuffer(x.instances);
			theMaterial.render(swapChain, commandQueue);
		});
		updateCam(camBuff);


		litPass.populateEnd(swapChain, gBuffer, scene.lightsBuff);
		litPass.executeEnd(commandQueue, fence, index);
	};

	render();
};

let scene = require("scene/scene.txt");

try {
	generalInit();

	let loadGBuff = require("gBuffer.txt");

	scene.addObject(math.vector3(0,0,0), math.vector(1,0,0,0), math.vector3(1,1,1));
	scene.addLight(math.vector3(0,5,0), math.vector3(1,1,1), 10);
	let sceneLoaded = 0;

	scene.load(device, func() {
		sceneLoaded = 1;
	});

	let getMat = func() {
		if (cubeVerts == none || camBuff == none || gBuffer == none || sceneLoaded == 0) {
			return;
		}
		updateCam(camBuff);
		theMaterial = prepMaterial();

		startRendMat();
	};

	loadGeometry(func() {
		print("Geometry Loaded!");
		getMat();
	});

	prepCamBuff(func() {
		print("Cam Buff loaded!");
		getMat();
	});

	loadGBuff(device, wnd.width(), wnd.height(), func(gBuff) {
		gBuffer = gBuff;

		litPass.setupStartCL(device, gBuffer);
		litPass.setupEndCL(device, gBuffer);

		print("GBuffer set up!");
		getMat();
	});

} catch(e) {
	print(e);
}
