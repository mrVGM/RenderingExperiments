let math = require("math.txt");
let utils = require("utils.txt");
let resources = require("resources/resourceUtils.txt");

let wnd = api.window();
wnd.create(1280, 720);

let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

let cam = api.aux.camera();
let initCamera = func(camBuff) {
	let pos = math.vector3(0, 2, 0);
	let target = math.vector3(0, 2, 5);

	let aspect = wnd.width() / wnd.height();
	cam.setPosition(pos);
	cam.setTarget(target);
	cam.setAspect(aspect);
	cam.setNearPlane(0.1);
	cam.setFarPlane(10000);
	cam.setFOV(60);

	cam.setCamBuff(camBuff);
	api.app_context.inputHandler = cam;

	return;
};

let gBuffer = none;
let litPass = api.deferred.litPass();

let prepMaterial = func() {
	let createMaterial = require("materials/unlitMaterial.txt");
	let material = createMaterial(device, "unlit.hlsl", gBuffer.camBuffer);
	return material;
};

let prepCloudMaterial = func() {
	let createMaterial = require("materials/cloudMaterial.txt");
	let material = none;
	try {
		material = createMaterial(device, "cloud.hlsl", cloudSettingsBuff, gBuffer, worlyData, scene);
	} catch(e) {
		print(e);
	}
	return material;
};

let theMaterial = none;
let cloudMaterial = none;

let renderClouds = func(objects, onReady) {
	let counter = 0;
	utils.foreach(objects, func(x) {
		counter = counter + 1;

		cloudMaterial.setObject(x.geometry);
		cloudMaterial.setInstanceBuffer(x.instances);
		cloudMaterial.render(swapChain, commandQueue, func() {
			counter = counter - 1;
			if (counter == 0) {
				onReady();
			}
		});
	});
};

let renderUnlits = func(objects) {
	utils.foreach(objects, func(x) {
		theMaterial.setObject(x.geometry);
		theMaterial.setInstanceBuffer(x.instances);
		theMaterial.render(swapChain, commandQueue);
	});
};

let startRendMat = func() {
	let fence = api.fence();
	fence.create(device);

	let index = 1;

	let clearRT = api.aux.clearRT();
	clearRT.create(device);

	let render = func() {		
		if (wnd.isAlive() == 0) {
			return;
		}

		let objects = scene.getObjects();
		let clouds = scene.getCloudObjects();

		swapChain.updateCurrentFrameIndex();

		clearRT.populate(swapChain);
		clearRT.executeAsync(commandQueue);
		renderUnlits(objects);

		renderClouds(clouds, func() {
			swapChain.present();
			wnd.finishDraw();
		});
	};

	api.app_context.render = func(arg) { render(); };
};

let scene = require("scene/scene.txt");
let worlyData = none;
let cloudSettingsBuff = none;


let settingsReader = api.aux.cloudSettingReader();
let readSettings = func() {
	let rawData = readFile("cloudSettings.txt");
	let settingsData = settingsReader.readCloudSettings(rawData);

	cloudSettingsBuff.copyData(settingsData);
};


try {
	generalInit();

	let loadGBuff = require("gBuffer.txt");

	scene.addObject(math.vector3(0,0,0), math.vector(math.cos(math.PI / 8), 0, -math.sin(math.PI / 8), 0), math.vector3(5000,1,5000));
	scene.addCloudObject(math.vector3(0,200,0), math.vector(1, 0, 0, 0), math.vector3(5000,1,5000));

	scene.addLight(math.vector3(0,5,0), math.vector3(1,1,1), 10);
	scene.addLight(math.vector3(5,0,0), math.vector3(1,1,1), 10);
	
	let sceneLoaded = 0;

	scene.load(device, func() {
		sceneLoaded = 1;
		getMat();
	});

	let worlyPrepared = 0;
	let computeWorly = require("worlyCompute.txt");
	computeWorly.prepare(device, 512, func(data) {
		worlyData = data;
		worlyData.execute(device, commandQueue, func() {
			worlyPrepared = 1;
			print("Worly Prepared!");
			getMat();
		});
	});

	let getMat = func() {
		if (gBuffer == none ||
			sceneLoaded == 0 ||
			worlyPrepared == 0 ||
			cloudSettingsBuff == none) {
			return;
		}
		initCamera(gBuffer.camBuffer);
		theMaterial = prepMaterial();
		cloudMaterial = prepCloudMaterial();

		startRendMat();
	};

	loadGBuff(device, wnd.width(), wnd.height(), func(gBuff) {
		gBuffer = gBuff;

		litPass.setupStartCL(device, gBuffer);
		litPass.setupEndCL(device, gBuffer);

		print("GBuffer set up!");
		getMat();
	});

	let cloudBB = resources.bufferBuilder();
	cloudBB.upload(1);
	cloudBB.setSize(256);
	cloudBB.setStride(256);
	cloudBB.build(device, func(buff) {
		cloudSettingsBuff = buff;
		readSettings();

		getMat();
	});

} catch(e) {
	print(e);
}


# TEMP DEBUG UPDATER
let updateCloudSettings = func() {
	if (cloudSettingsBuff != none) {
		readSettings();
	}
	timeout(updateCloudSettings, 1000);
};
updateCloudSettings();