let math = require("math.txt");
let utils = require("utils.txt");

let wnd = api.window();
wnd.create(600, 400);

let inputManager = require("inputManager.txt");
inputManager.init(wnd);

let windowLoopCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.windowLoop();
	timeout(windowLoopCrt, 0);
};
windowLoopCrt();

let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

let cam = api.aux.camera();
let initCamera = func(camBuff) {
	let pos = math.vector3(0, 0, -5);
	let target = math.vector3(0, 0, 0);

	let aspect = wnd.width() / wnd.height();
	cam.setPosition(pos);
	cam.setTarget(target);
	cam.setAspect(aspect);
	cam.setNearPlane(0.1);
	cam.setFarPlane(10000);
	cam.setFOV(60);

	let camData = cam.getMVPMatrix();
	utils.foreach(pos, func(x) {
		camData.push(x);
	});

	camBuff.copyData(camData);
};

let pi = math.PI;

let lastTick = none;
let camSpeed = 5;
let camRotationSpeed = 2;
let azimuth = pi / 2;
let altitude = 0;

let updateCam = func(camBuff) {
	let n = now();
	if (lastTick == none) {
		lastTick = n;
	}
	let dt = n - lastTick;
	lastTick = n;

	let f = math.multiply(dt * camSpeed * inputManager.moveForward, cam.getForward());
	let r = math.multiply(dt * camSpeed * inputManager.moveRight, cam.getRight());

	let offset = math.addVectors(f, r);

	let pos = cam.getPos();
	pos = math.addVectors(pos, offset);

	azimuth = azimuth + dt * inputManager.aimRight * camRotationSpeed;
	altitude = altitude + dt * inputManager.aimUp * camRotationSpeed;

	let lower = -pi / 2 + pi / 10;
	let upper = pi / 2 - pi / 10;

	if (altitude < lower) {
		altitude = lower;
	}
	if (altitude > upper) {
		altitude = upper;
	}

	let aim = math.vector3(math.cos(azimuth) * math.cos(altitude), math.sin(altitude), math.sin(azimuth) * math.cos(altitude));
	let target = math.addVectors(pos, aim);

	cam.setPosition(pos);
	cam.setTarget(target);

	let camData = cam.getMVPMatrix();
	utils.foreach(pos, func(x) {
		camData.push(x);
	});

	camBuff.copyData(camData);
};

let resources = require("resources/resourceUtils.txt");

let gBuffer = none;
let litPass = api.deferred.litPass();

let prepMaterial = func() {
	let createMaterial = require("materials/litMaterial.txt");
	let material = createMaterial(device, "cube.hlsl", gBuffer);
	return material;
};

let prepCloudMaterial = func() {
	let createMaterial = require("materials/cloudMaterial.txt");
	let material = none;
	try {
		material = createMaterial(device, "cloud.hlsl", gBuffer, worlyData);
	} catch(e) {
		print(e);
	}
	return material;
};

let theMaterial = none;
let cloudMaterial = none;

let renderClouds = func(objects, onReady) {
	let counter = 0;
	utils.foreach(objects, func(x) {
		counter = counter + 1;

		cloudMaterial.setObject(x.geometry);
		cloudMaterial.setInstanceBuffer(x.instances);
		cloudMaterial.render(swapChain, commandQueue, func() {
			counter = counter - 1;
			if (counter == 0) {
				onReady();
			}
		});
	});
};

let startRendMat = func() {
	let fence = api.fence();
	fence.create(device);

	let index = 1;

	let render = func() {		
		if (wnd.isAlive() == 0) {
			return;
		}

		let objects = scene.getObjects();
		let clouds = scene.getCloudObjects();

		let fe = api.fenceEvent();
		fe.create();

		fe.wait(fence, index, func(arg) {
			index = index + 1;

			renderClouds(clouds, func() {
				swapChain.present();
				render();
			});
		});

		swapChain.updateCurrentFrameIndex();
		litPass.executeStart(commandQueue, fence, 0);

		utils.foreach(objects, func(x) {
			theMaterial.setObject(x.geometry);
			theMaterial.setInstanceBuffer(x.instances);
			theMaterial.render(swapChain, commandQueue);
		});
		updateCam(gBuffer.camBuffer);


		litPass.populateEnd(swapChain, gBuffer, scene.lightsBuff, scene.lightsConstantBuff);
		litPass.executeEnd(commandQueue, fence, index);
	};

	render();
};

let scene = require("scene/scene.txt");
let worlyData = none;

try {
	generalInit();

	let loadGBuff = require("gBuffer.txt");

	scene.addObject(math.vector3(0,-100,0), math.vector(math.cos(math.PI / 8), 0, -math.sin(math.PI / 8), 0), math.vector3(1,1,1));
	scene.addCloudObject(math.vector3(0,2,0), math.vector(1,0,0,0), math.vector3(5,1,5));

	scene.addLight(math.vector3(0,5,0), math.vector3(1,1,1), 10);
	scene.addLight(math.vector3(5,0,0), math.vector3(1,1,1), 10);
	
	let sceneLoaded = 0;

	scene.load(device, func() {
		sceneLoaded = 1;
		getMat();
	});

	let worlyPrepared = 0;
	let computeWorly = require("worlyCompute.txt");
	computeWorly.prepare(device, 256, func(data) {
		worlyData = data;
		worlyData.execute(device, commandQueue, func() {
			worlyPrepared = 1;
			print("Worly Prepared!");
			getMat();
		});
	});

	let getMat = func() {
		if (gBuffer == none || sceneLoaded == 0 || worlyPrepared == 0) {
			return;
		}
		initCamera(gBuffer.camBuffer);
		theMaterial = prepMaterial();
		cloudMaterial = prepCloudMaterial();

		startRendMat();
	};

	loadGBuff(device, wnd.width(), wnd.height(), func(gBuff) {
		gBuffer = gBuff;

		litPass.setupStartCL(device, gBuffer);
		litPass.setupEndCL(device, gBuffer);

		print("GBuffer set up!");
		getMat();
	});

} catch(e) {
	print(e);
}
