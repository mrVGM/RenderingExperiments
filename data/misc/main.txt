let wnd = api.window();
wnd.create(600, 400);

let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let vertexShader = api.vertexShader();
let pixelShader = api.pixelShader();

let setupShaders = func() {
	let shaderCode = readFile("shaders.hlsl");

	vertexShader.compile(shaderCode);
	pixelShader.compile(shaderCode);
	
	print("Shaders compiled!");
};


let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

let canvas = none;

let createCanvas = require("canvas.txt");
let canvasRenderer = require("canvasRenderer.txt");
let computeData = none;

let render = func() {

	if (wnd.isAlive() == 0) {
		return;
	}

	try {
		swapChain.updateCurrentFrameIndex();
		canvasRenderer.render(commandQueue, swapChain, func() {
			swapChain.present();
			render();
		});

	} catch(e) {
		print(e);
	}
};

let startRender = func() {
	print("Starting to render!");

	canvasRenderer.create(device);
	canvasRenderer.addCanvas(canvas);

	canvasRenderer.texInit(device, commandQueue, func() {
		render();
	});
};


let drawing = func() {
	try {
		createCanvas(device, vertexShader, pixelShader, func(cnv) {
			canvas = cnv;
			startRender();
		});
	} catch(e) {
		print(e);
	}
};

let computeInit = require("compute.txt");
let compute = func() {
	computeInit(device, func(obj) {
		obj.dispatch();
		computeData = obj;
		drawing();
	});
};

try {
	setupShaders();
	generalInit();
	compute();
} catch(e) {
	print(e);
}
