let wnd = api.window();
wnd.create(600, 400);

let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let vertexShader = api.vertexShader();
let vertexShader2 = api.vertexShader();
let pixelShader = api.pixelShader();
let pixelShader2 = api.pixelShader();

let setupShaders = func() {
	let shaderCode = readFile("shaders.hlsl");
	let shaderCode2 = readFile("shaders2.hlsl");

	vertexShader.compile(shaderCode);
	pixelShader.compile(shaderCode);

	vertexShader2.compile(shaderCode2);
	pixelShader2.compile(shaderCode2);

	print("Shaders compiled!");
};


let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

let cbData = [];
cbData.push(0);
cbData.push(0);
cbData.push(0.5);
cbData.push(0.5);

let canvas = none;
let canvas2 = none;

let createCanvas = require("canvas.txt");

let update = func() {
	cbData[0] = -0.5;
	cbData[1] = -0.5;
	cbData[2] = 0.5;
	cbData[3] = 0.5;
	canvas.constantBuff.copyData(cbData);

	cbData[0] = 0.5;
	cbData[1] = 0.5;
	cbData[2] = 0.5;
	cbData[3] = 0.5;

	canvas2.constantBuff.copyData(cbData);
};

let canvasRenderer = require("canvasRenderer.txt");
let render = func() {
	if (wnd.isAlive() == 0) {
		return;
	}

	try {
		swapChain.updateCurrentFrameIndex();
		canvasRenderer.render(commandQueue, swapChain, func() {
			swapChain.present();
			update();
			render();
		});

	} catch(e) {
		print(e);
	}
};

let startRender = func() {
	print("Starting to render!");

	canvasRenderer.create(device);
	canvasRenderer.addCanvas(canvas);
	canvasRenderer.addCanvas(canvas2);

	render();
};

let computeInit = func() {
	let init = require("compute.txt");
	init(device, func(obj) {
		print("COMPUTE");


	});
};

try {
	setupShaders();
	generalInit();

	try {
		computeInit();
	} catch(e) {
		print(e);
	}


	let waiting = 2;

	createCanvas(device, vertexShader, pixelShader, func(cnv) {
		waiting = waiting - 1;
		canvas = cnv;
		print(canvas);

		if (waiting == 0) {
			startRender();
		}
	});

	createCanvas(device, vertexShader2, pixelShader2, func(cnv) {
		waiting = waiting - 1;
		canvas2 = cnv;
		print(canvas2);

		if (waiting == 0) {
			startRender();
		}
	});

} catch(e) {
	print(e);
}