let wnd = api.window();
wnd.create(600, 400);

let aspect = wnd.width / wnd.height;
print(aspect);

let vertexData = [];
vertexData.push(0);
vertexData.push(0.25 * aspect);
vertexData.push(0);
vertexData.push(1);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);

vertexData.push(0.25);
vertexData.push(-0.25 * aspect);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);
vertexData.push(0);
vertexData.push(1);

vertexData.push(-0.25);
vertexData.push(-0.25 * aspect);
vertexData.push(0);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);
vertexData.push(1);


let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();


let device = api.device();
let renderCrt = func() {
	if (wnd.isAlive() == 0) {
		return;
	}

	try {
		device.render();
	} catch(e) {
		print(e);
		return;
	}

	timeout(renderCrt);
};

let shaderCode = readFile("shaders.hlsl");

let vertexShader = api.vertexShader();
let pixelShader = api.pixelShader();

let fence = api.fence();

try {
	vertexShader.compile(shaderCode);
	pixelShader.compile(shaderCode);
	print("Shaders compiled!");

	device.init(wnd);

	fence.create(device);
	print("Fence created!");

	device.load(vertexShader, pixelShader, fence);
	print("Device Init Completed!");

	renderCrt();
} catch (e) {
	print(e);
}

let heap = api.heap();

let loadBuffer = func() {
	try {
		let buf = api.buffer();
		buf.init(84);
		buf.place(device, heap, 0);
		buf.copyData(vertexData);

		print("Buffer Placed!");
	} catch (e) {
		print(e);
	}
};

try {
	let fenceEvent = api.fenceEvent();

	fenceEvent.create();
	fenceEvent.wait(fence, func(arg) { 
		print("Heap is now resident!");
		loadBuffer();
	});

	let signal = fenceEvent.getID();

	heap.create(device, 100, "UPLOAD");

	heap.makeResident(fence, signal);

	print("Heap Created!");
} catch(e) {
	print(e);
}


