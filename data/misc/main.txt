let wnd = api.window();
wnd.create(600, 400);

let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let vertexShader = api.vertexShader();
let pixelShader = api.pixelShader();

let setupShaders = func() {
	let shaderCode = readFile("shaders.hlsl");
	vertexShader.compile(shaderCode);
	pixelShader.compile(shaderCode);
	print("Shaders compiled!");
};


let device = api.device();
let swapChain = api.swapChain();
let fence = api.fence();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	fence.create(device);
	print("General Init!");
};

let cbData = [];
cbData.push(0);
cbData.push(0);
cbData.push(0.5);
cbData.push(0.5);

let canvas = none;
let createCanvas = require("canvas.txt");

let update = func() {
	cbData[0] = cbData[0] + 0.001;
	if (cbData[0] > 1) {
		cbData[0] = -1;
	}
	cbData[2] = 0.5;
	cbData[3] = 0.5;

	canvas.constantBuff.copyData(cbData);
};

let render = func() {
	if (wnd.isAlive() == 0) {
		return;
	}

	try {
		swapChain.updateCurrentFrameIndex();
		canvas.render(swapChain, commandQueue, func() {
			swapChain.present();

			update();
			render();
		});
	} catch(e) {
		print(e);
	}
};

let startRender = func() {
	try {
		let cbuffs = [];
		cbuffs.push(canvas.constantBuff);
		print("Ready to Render!");

	} catch(e) {
		print(e);
	}

	render();

};

try {
	setupShaders();
	generalInit();
	createCanvas(device, fence, vertexShader, pixelShader, func(cnv) {
		canvas = cnv;
		print(canvas);
		startRender();
	});
} catch(e) {
	print(e);
}