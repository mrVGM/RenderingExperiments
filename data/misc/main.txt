let wnd = api.window();
wnd.create(600, 400);

let aspect = wnd.width / wnd.height;

let vertexData = [];
vertexData.push(0.0);
vertexData.push(0.25 * aspect);
vertexData.push(0);
vertexData.push(1);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);

vertexData.push(0.25);
vertexData.push(-0.25 * aspect);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);
vertexData.push(0);
vertexData.push(1);

vertexData.push(-0.25);
vertexData.push(-0.25 * aspect);
vertexData.push(0);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);
vertexData.push(1);


let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let vertexShader = api.vertexShader();
let pixelShader = api.pixelShader();

let setupShaders = func() {
	let shaderCode = readFile("shaders.hlsl");
	vertexShader.compile(shaderCode);
	pixelShader.compile(shaderCode);
	print("Shaders compiled!");
};


let device = api.device();
let fence = api.fence();
let vertexBuff = api.buffer();
let commandList = api.commandList();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	device.init(wnd, commandQueue);
	commandList.create(device, vertexShader, pixelShader);
	fence.create(device);
	print("General Init!");
};

let heap = api.heap();

let loadHeap = func(onLoaded) {
	let fenceEvent = api.fenceEvent();
	fenceEvent.create();
	fenceEvent.wait(fence, func(arg) {
		print("Heap Loaded!");
		onLoaded();
	});
	let signal = fenceEvent.getID();

	heap.create(device, 100, "UPLOAD");
	print("Heap Created!");
	heap.makeResident(fence, signal);
};

let render = func() {
	if (wnd.isAlive() == 0) {
		return;
	}

	try {
		let frameDone = api.fenceEvent();
		frameDone.create();

		frameDone.wait(fence, func(arg) {
			try {
				device.present();
				render();
			} catch(exc) {
				print(e);
			}
		});

		device.updateCurrentFrameIndex();
		commandList.populate(device);
		commandList.execute(commandQueue, fence, frameDone.getID());
	} catch(e) {
		print(e);
	}
};


let heapLoaded = func() {
	try {
		vertexBuff.init(84);
		vertexBuff.place(device, heap, 0);
		vertexBuff.copyData(vertexData);
		print("Buffer Placed!");

		device.load(vertexShader, pixelShader, fence, vertexBuff);
	} catch(e) {
		print(e);
	}

	render();
};

try {
	setupShaders();
	generalInit();
	loadHeap(heapLoaded);
} catch(e) {
	print(e);
}