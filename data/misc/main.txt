let wnd = api.window();
wnd.create(600, 400);

let w = wnd.width();
let h = wnd.height();

let aspect = w / h;
print(aspect);

let vertexData = [];
vertexData.push(0.0);
vertexData.push(0.25 * aspect);
vertexData.push(0);
vertexData.push(1);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);

vertexData.push(0.25);
vertexData.push(-0.25 * aspect);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);
vertexData.push(0);
vertexData.push(1);

vertexData.push(-0.25);
vertexData.push(-0.25 * aspect);
vertexData.push(0);
vertexData.push(0);
vertexData.push(0);
vertexData.push(1);
vertexData.push(1);

let cbData = [];
let index = 0;
while (index < 256) {
	cbData.push(0);
	index = index + 1;
}

let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let vertexShader = api.vertexShader();
let pixelShader = api.pixelShader();

let setupShaders = func() {
	let shaderCode = readFile("shaders.hlsl");
	vertexShader.compile(shaderCode);
	pixelShader.compile(shaderCode);
	print("Shaders compiled!");
};


let device = api.device();
let swapChain = api.swapChain();
let fence = api.fence();
let vertexBuff = api.buffer();
let constantBuff = api.buffer();
let commandList = api.commandList();
let commandQueue = api.commandQueue();

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	fence.create(device);
	print("General Init!");
};

let vertexHeap = api.heap();
let cbHeap = api.heap();

let loadHeap = func(onLoaded) {
	let waiting = 2;

	let fe1 = api.fenceEvent();
	fe1.create();
	fe1.wait(fence, func(arg) {
		waiting = waiting - 1;
		print("Vertex Heap Loaded!");

		if (waiting == 0) {
			onLoaded();
		}
	});
	let vHeapSignal = fe1.getID();

	let fe2 = api.fenceEvent();
	fe2.create();
	fe2.wait(fence, func(arg) {
		waiting = waiting - 1;
		print("Constant Buffer Heap Loaded!");

		if (waiting == 0) {
			onLoaded();
		}
	});
	let cbHeapSignal = fe2.getID();

	vertexHeap.create(device, 100, "UPLOAD");
	print("Vertex Heap Created!");
	cbHeap.create(device, 256, "UPLOAD");
	print("Constant Buffer Heap Created!");
	vertexHeap.makeResident(fence, vHeapSignal);
	cbHeap.makeResident(fence, cbHeapSignal);
};

let render = func() {
	if (wnd.isAlive() == 0) {
		return;
	}

	try {
		let frameDone = api.fenceEvent();
		frameDone.create();

		frameDone.wait(fence, func(arg) {
			try {
				swapChain.present();
				render();
			} catch(exc) {
				print(e);
			}
		});

		swapChain.updateCurrentFrameIndex();
		commandList.populate(swapChain);
		commandList.execute(commandQueue, fence, frameDone.getID());
	} catch(e) {
		print(e);
	}
};


let heapLoaded = func() {
	try {
		vertexBuff.init(84);
		vertexBuff.place(device, vertexHeap, 0);
		vertexBuff.copyData(vertexData);
		print("Vertex Buffer Placed!");

		constantBuff.init(256);
		constantBuff.place(device, cbHeap, 0);
		constantBuff.copyData(cbData);
		print("Constant Buffer Placed!");


		commandList.create(device, vertexShader, pixelShader, vertexBuff, 28);
	} catch(e) {
		print(e);
	}

	render();
};

try {
	setupShaders();
	generalInit();
	loadHeap(heapLoaded);
} catch(e) {
	print(e);
}