let math = require("math.txt");
let utils = require("utils.txt");

let wnd = api.window();
wnd.create(600, 400);

let dragCrt = func() {
	if (wnd.isAlive() == 0) {
		print("Window closed!");
		wnd = none;
		return;
	}
	wnd.drag();
	timeout(dragCrt, 0);
};
dragCrt();

let device = api.device();
let swapChain = api.swapChain();
let commandQueue = api.commandQueue();

let worlyData = none;
let worlyRenderer = none;

let generalInit = func() {
	device.create();
	commandQueue.create(device);
	swapChain.create(device, wnd, commandQueue);
	print("General Init!");
};

let offset = 0;
let updateUVW = func() {
	return;
	offset = offset + 0.001;
	let tmp = [];
	tmp.push(offset);

	worlyRenderer.constBuff.copyData(tmp);
};

let tryStartRender = func() {
	if (worlyData == none) {
		return;
	}
	if (worlyRenderer == none) {
		return;
	}

	try {
		worlyRenderer.startRender(wnd, swapChain, commandQueue, worlyData, updateUVW);
	}  catch(e) {
		print(e);
	}
};

let requestRenderer = func() {
	let req = require("displayWorly.txt");
	req(device, func(renderer) {
		worlyRenderer = renderer;
		print("Renderer acquired!");
		tryStartRender();
	});
};


let worlyExecute = func() {
	try {
		print("Texture Processing Begin!");
		
		worlyData.execute(device, commandQueue, func() {
			print("Texture Processing End!");
			tryStartRender();
		});

	} catch(e) {
		print(e);
	}
};

let worlyInit = func() {
	let worly = require("worlyCompute.txt");
	worly.prepare(device, 256, func(data) {
		worlyData = data;
		print("Worly Init!");

		worlyExecute();
	});
};

let rend3D = none;

let cam = api.aux.camera();

let offset = 0;

let updateCam = func() {
	offset = offset + 0.01;

	let pos = math.vector3(0, -offset, -5);
	let target = math.vector3(0, 0, 0);

	let aspect = wnd.width() / wnd.height();
	cam.setPosition(pos);
	cam.setTarget(target);
	cam.setAspect(aspect);
	cam.setNearPlane(0.1);
	cam.setFarPlane(10000);
	cam.setFOV(60);

	let mat = cam.getMVPMatrix();

	rend3D.constBuff.copyData(mat);
};

let updateCamSafe = func() {
	try {
		updateCam();
	} catch(e) {
		print(e);
	}
};

let startRender3D = func(vertexBuff, indexBuff) {
	let render3DCL = require("displayCube.txt");
	render3DCL(device, func(rend) {
		rend3D = rend;
		rend3D.startRender(wnd, swapChain, commandQueue, vertexBuff, indexBuff, updateCamSafe);
	});
};

let cube = require("cube.txt");

try {
	generalInit();

	cube(device, func(buffer, indexBuffer) {
		print(indexBuffer);
		startRender3D(buffer, indexBuffer);
	});

	#worlyInit();
	#requestRenderer();
} catch(e) {
	print(e);
}
