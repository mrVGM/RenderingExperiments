let constHeap = api.heap();
let constBuff = api.buffer();

let inUse = 0;

let loadConstData = func(device, onReady) {
	let fence = api.fence();
	fence.create(device);

	let fe = api.fenceEvent();
	fe.create();
	fe.wait(fence, 1, func(arg) {
		constBuff.init(256);
		constBuff.place(device, constHeap, 0, 0);
		onReady();
	});

	constHeap.create(device, 256, "UPLOAD");
	constHeap.makeResident(fence, 1);
};

let requestRenderer = func(device, onReady) {
	if (inUse) {
		thow("Renderer already in use!");
	}
	inUse = 1;

	let compileShaders = func() {
		let shaderCode = readFile("shaders.hlsl");

		let vertexShader = api.vertexShader();
		vertexShader.compile(shaderCode);

		let pixelShader = api.pixelShader();
		pixelShader.compile(shaderCode);

		let res = {};
		res.vs = vertexShader;
		res.ps = pixelShader;

		return res;
	};

	let startRender = func(wnd, swapChain, commandQueue, vertexBuff, onRender) {

		let shaders = compileShaders();

		let display3DCL = api.display3DCL();
		display3DCL.create(device, shaders.vs, shaders.ps, constBuff, vertexBuff);

		let descriptors = [];
		let texDesc = {};
		texDesc.type = "srv_tex";
		texDesc.texture = worlyData.getUAVTex();

		descriptors.push(texDesc);

		let descHeap = api.descriptorHeap();
		descHeap.create(device, descriptors);

		let frame = 0;

		let fence = api.fence();
		fence.create(device);

		let render = func() {
			let renderImpl = func() {
				if (wnd.isAlive() == 0) {
					return;
				}

				let renderFE = api.fenceEvent();
				renderFE.create();

				renderFE.wait(fence, frame, func(arg) {
					swapChain.present();	
					frame = frame + 1;
					if (onRender != none) {
						onRender();
					}
					render();
				});

				swapChain.updateCurrentFrameIndex();
				displayWorlyCL.populate(swapChain, descHeap);
				displayWorlyCL.execute(commandQueue, fence, frame);
			};

			try {
				renderImpl();
			} catch(e) {
				print(e);
			}
		};

		render();
	};

	loadConstData(device, func() {
		let res = {};
		res.startRender = startRender;
		res.constBuff = constBuff;
		onReady(res);
	});
};

export = requestRenderer;