let vertexData = [];
vertexData.push(-1);
vertexData.push(-1);
vertexData.push(0);
vertexData.push(0);

vertexData.push(-1);
vertexData.push(1);
vertexData.push(0);
vertexData.push(1);

vertexData.push(1);
vertexData.push(1);
vertexData.push(1);
vertexData.push(1);

vertexData.push(-1);
vertexData.push(-1);
vertexData.push(0);
vertexData.push(0);

vertexData.push(1);
vertexData.push(1);
vertexData.push(1);
vertexData.push(1);

vertexData.push(1);
vertexData.push(-1);
vertexData.push(1);
vertexData.push(0);

let createGBuff = func(device, width, height, onReady) {
	let resources = require("resources/resourceUtils.txt");

	let shaderCode = readFile("defferedShading.hlsl");
	let vertexShader = api.vertexShader();
	vertexShader.compile(shaderCode);

	let pixelShader = api.pixelShader();
	pixelShader.compile(shaderCode);

	let vertexBuffer = none;
	let vertexUploadBuffer = none;
	let diffuseTex = none;
	let normalTex = none;
	let positionTex = none;

	let vertexBB = resources.bufferBuilder();
	vertexBB.upload(0);
	vertexBB.setSize(4 * vertexData.length);
	vertexBB.setStride(16);

	let vertexUploadBB = resources.bufferBuilder();
	vertexUploadBB.upload(1);
	vertexUploadBB.setSize(4 * vertexData.length);
	vertexUploadBB.setStride(16);

	let diffuseTexBB = resources.textureBuilder();
	diffuseTexBB.setWidth(width);
	diffuseTexBB.setHeight(height);
	diffuseTexBB.setRTV(1);

	let normalTexBB = resources.textureBuilder();
	normalTexBB.setWidth(width);
	normalTexBB.setHeight(height);
	normalTexBB.setRTV(1);

	let positionTexBB = resources.textureBuilder();
	positionTexBB.setWidth(width);
	positionTexBB.setHeight(height);
	positionTexBB.setRTV(1);

	let copied = 0;

	let assembleGBuff = func() {
		if (copied == 0 ||
			diffuseTex == none ||
			normalTex == none ||
			positionTex == none) {
			return;
		}

		let descriptors = [];
		let diffuseTexDesc = {};
		diffuseTexDesc.type = "srv_tex";
		diffuseTexDesc.texture = diffuseTex;
		descriptors.push(diffuseTexDesc);

		let normalTexDesc = {};
		normalTexDesc.type = "srv_tex";
		normalTexDesc.texture = normalTex;
		descriptors.push(normalTexDesc);

		let positionTexDesc = {};
		positionTexDesc.type = "srv_tex";
		positionTexDesc.texture = positionTex;
		descriptors.push(positionTexDesc);

		
		let descHeap = api.descriptorHeap();
		descHeap.create(device, descriptors);

		let gBuffer = api.deferred.gBuffer();
		gBuffer.create(
			device,
			vertexBuffer,
			vertexShader,
			pixelShader,
			width,
			height,
			descHeap,
			diffuseTex,
			normalTex,
			positionTex);

		onReady(gBuffer);
	};

	let copy = func() {
		if (vertexBuffer == none || vertexUploadBuffer == none) {
			return;
		}

		resources.copyBuffers(device, vertexBuffer, vertexUploadBuffer, func() {
			copied = 1;
			assembleGBuff();
		});
	};

	vertexBB.build(device, func(vertex) {
		vertexBuffer = vertex;
		copy();
	});

	vertexUploadBB.build(device, func(vertexUpload) {
		vertexUploadBuffer = vertexUpload;
		vertexUploadBuffer.copyData(vertexData);
		copy();
	});

	diffuseTexBB.build(device, func(tex) {
		diffuseTex = tex;
		assembleGBuff();
	});

	normalTexBB.build(device, func(tex) {
		normalTex = tex;
		assembleGBuff();
	});

	positionTexBB.build(device, func(tex) {
		positionTex = tex;
		assembleGBuff();
	});


};

export = createGBuff;