let bufferBuilder = func() {
	let allowUA = 0;
	let upload = 0;
	let size = 0;
	let stride = 0;

	let res = {};
	res.allowUA = func(x) {
		allowAU = x;
	};

	res.upload = func(x) {
		upload = x;
	};

	res.setSize = func(x) {
		size = x;
	};

	res.setStride = func(x) {
		stride = x;
	};

	res.build = func(device, onReady) {
		if (size == 0) {
			throw("Size of buffer not set!");
		}

		let heap = api.heap();
		let buffer = api.buffer();

		let fence = api.fence();
		fence.create(device);

		let fe = api.fenceEvent();
		fe.create();
		fe.wait(fence, 1, func(arg) {
			buffer.init(size);
			buffer.setStride(stride);
			buffer.place(device, heap, 0, allowUA);
			onReady(buffer);
		});

		let type = "DEFAULT";
		if (upload) {
			type = "UPLOAD";
		}

		heap.create(device, size, type);
		heap.makeResident(fence, 1);
	};

	return res;
};

let copyBuffers = func(device, dst, src, onReady) {
	let commandQueue = api.copyCommandQueue();
	commandQueue.create(device);

	let fence = api.fence();
	fence.create(device);

	let fe = api.fenceEvent();
	fe.create();
	fe.wait(fence, 1, func(arg) {
		onReady();
	});

	let copyCL = api.copyCL();
	copyCL.create(device);
	copyCL.populate(dst, src);
	copyCL.execute(commandQueue, fence, 1);
};

let textureBuilder = func() {
	let allowUA = 0;
	let width = 0;
	let height = 0;
	let depth = 0;
	let dim = 2;
	let rtv = 0;

	let res = {};
	res.allowUA = func(x) {
		allowAU = x;
	};

	res.setWidth = func(x) {
		width = x;
	};

	res.setHeight = func(x) {
		height = x;
	};

	res.setDepth = func(x) {
		depth = x;
	};

	res.setDim = func(x) {
		dim = x;
	};

	res.setRTV = func(x) {
		rtv = x;
	};

	res.build = func(device, onReady) {
		if (width <= 0 || height <= 0) {
			throw("Invalid width or height of the texture!");
		}

		let heap = api.heap();
		let tex = api.texture();

		let initTex = func() {
			if (rtv) {
				tex.initAsDiffuseRT(width, height);
				return;
			}

			if (dim == 2) {
				tex.init(width, height, allowUA);
				return;
			}
			if (dim == 3) {
				tex.init3D(width, height, depth, allowUA);
				return;
			}
		};
		initTex();

		let fence = api.fence();
		fence.create(device);

		let fe = api.fenceEvent();
		fe.create();
		fe.wait(fence, 1, func(arg) {
			tex.place(device, heap, 0);
			onReady(tex);
		});

		let type = "DEFAULT";
		let size = tex.getAllocationSize(device);

		heap.create(device, size, type);
		heap.makeResident(fence, 1);
	};

	return res;
};

let obj = {};
obj.bufferBuilder = bufferBuilder;
obj.copyBuffers = copyBuffers;
obj.textureBuilder = textureBuilder;

export = obj;

